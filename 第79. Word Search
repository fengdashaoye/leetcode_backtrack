Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically 
neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.

思路：这是一道很有意思的题，这道题的思路是遍历二维数组中的每一个字母，以其为起点，向四周递归看是否发现存在符合字符串的情况。
因为一个坐标的字母只能被遍历一遍，所以递归后赋予'*'来标明其已经被测试过了，后序不可用了，最后要记得还原该坐标的字母。

代码：
class Solution {
    public boolean exist(char[][] board, String word) {
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(exist(board, word, i, j, 0)){
                    return true;
                }
            }
        }
        return false;
    }
    public boolean exist(char[][] board, String word, int i, int j, int now){
        if(now == word.length()){
            return true;
        }
        if( i >= board.length || i < 0 || j < 0 || j >= board[0].length || board[i][j] != word.charAt(now)){
            return false;
        }
        board[i][j] = '*';//标明已经用过了
        boolean result = exist(board, word, i + 1, j, now + 1) || exist(board, word, i, j + 1, now + 1) 
            || exist(board, word, i - 1, j, now + 1) || exist(board, word, i, j - 1, now + 1);
        board[i][j] = word.charAt(now); //恢复
        return result;
    }
}
