Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

思路：这是一道典型的回溯题目，注意看上面，有[1,2]，没有[2,1]。所以在回溯过程中，只要往后走就行了
比如当start=1时，[1,2] 删除后末尾后添加3[1,3]，删除末尾后添加4[1,4]，删除末尾，返回后又删除，然后2开始，之后是[2,3],[2,4],删除完后
是3开头，为[3,4].
代码：
class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        backtrack(result, new ArrayList<Integer>(), 1, n, k);
        return result;
        
    }
    
    public void backtrack(List<List<Integer>> result, List<Integer> content, int start, int n, int k){
        if(k == 0){
            result.add(new ArrayList<Integer>(content));
            return;
        }
        for(int i = start; i <= n; i++){
            content.add(i);
            backtrack(result, content, i + 1, n, k - 1);
            content.remove(content.size() - 1);
        }
    }
}
