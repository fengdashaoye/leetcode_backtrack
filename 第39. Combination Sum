Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate
numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 
[
  [7],
  [2, 2, 3]
]

第一次做完发现错误就知道这道题需要用递归，
错误的代码：
public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(candidates.length == 0){
            return result;
        }
        List<Integer> content;
        List<Integer> new_content;
        for(int i = 0; i < candidates.length; i++){
            content = new ArrayList<Integer>();
            int middle = target;
            int start = candidates[i];
            int beishu = 1;
            while(start*beishu < middle){
                content.add(start);
                for(int j = i + 1; j < candidates.length; j++){
                    if((middle - start*beishu) % candidates[j] == 0){
                        int shuliang = (middle - start*beishu) / candidates[j];
                        for(int m = 0; m < shuliang; m++){
                            content.add(candidates[j]);
                        }
                        result.add(content);
                        int length = content.size();
                        new_content = new ArrayList<Integer>();
                        for(int m = 0; m < length - shuliang; m++){//还原
                        	new_content.add(content.get(m));
                        }
                        content = new_content;
                    }
                    
                }
                beishu++;
            }
            if(start*beishu == middle){
                content.add(start);
                result.add(content);
            }
        }
        return result;
    }
    
我这只考虑了每个list<Integer>里最多包含两种不同的元素，但其实可以有更多的元素，因此需要递归
public void backtrack(List<List<Integer>> result, List<Integer> content, int[] candidates,int target, int start){
        if(target > 0){
            for(int i = start; i < candidates.length; i++){
                content.add(candidates[i]);
                backtrack(result, content, candidates, target - candidates[i], i);
                content.remove(content.size() - 1);
            }
            
        }else if(target == 0){
            result.add(new ArrayList<Integer>(content));
        }
    }
    里面这个for循环,确保了保证所有的元素都有机会包含。
代码:
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        backtrack(result, new ArrayList<Integer>(), candidates, target, 0);
        return result;
    }
    
    public void backtrack(List<List<Integer>> result, List<Integer> content, int[] candidates,int target, int start){
        if(target > 0){
            for(int i = start; i < candidates.length; i++){
                content.add(candidates[i]);
                backtrack(result, content, candidates, target - candidates[i], i);
                content.remove(content.size() - 1);
            }
            
        }else if(target == 0){
            result.add(new ArrayList<Integer>(content));
        }
    }
}
