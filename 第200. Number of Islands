Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is 
formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example 1:

11110
11010
11000
00000
Answer: 1

Example 2:

11000
11000
00100
00011
Answer: 3

思路：孤岛，其四周都为海，孤岛可以为相连的land组成，这道题就是一道深度优先遍历的题目，我写了两种方法，第一种借助全局boolean[][]panduan。
用来标记哪些land已经被选过了，第二种方法，被标记过的land将其值改成'0'即可。

深度遍历，找到一个孤岛的所有land，标记他们，然后继续遍历char[][]grid，找下一个land，且其没有被标记，然后以其为起点，深度优先遍历，标记这个
island上land的状态。

深度优先遍历就是不断标记，标记可以重新定义一个数据结构，改变那个数据结构相应位置的状态，或者将原先数据结构的坐标的值改变即可。
然后向四周遍历。
注意边界。

代码：
第一种
class Solution {
    boolean[][] panduan;
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length <= 0){
            return 0;
        }
        
        panduan = new boolean[grid.length][grid[0].length];
        int row = grid.length;
        int line = grid[0].length;
        int result = 0;
        
        for(int i = 0; i < row; i++){
            for(int j = 0; j < line; j++){
                if(grid[i][j] == '1'){
                    if(panduan[i][j] != true){
                        join(i, j, grid);
                        result++;
                    }
                }
            }
        }
        return result;
    }
    
    /*public void join(int i, int j, char[][] grid, boolean[][] panduan){//这种不知为何会报Line 30: java.lang.StackOverflowError
        if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] != '1'){
            return;
        }
        panduan[i][j] = true;//标记他已经被选过了
        join(i - 1, j, grid, panduan);
        join(i + 1, j, grid, panduan);
        join(i, j - 1, grid, panduan);
        join(i, j + 1, grid, panduan);
    }*/
    public void join(int i, int j, char[][] grid){//还是报java.lang.StackOverflowError错
        //if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] != '1')就会报错，这样就不会
        if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] != '1' || panduan[i][j] == true){
            return;
        }
        panduan[i][j] = true;//标记他已经被选过了
        join(i - 1, j, grid);
        join(i + 1, j, grid);
        join(i, j - 1, grid);
        join(i, j + 1, grid);
    }
}
第二种：
class Solution {
    boolean[][] panduan;
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length <= 0){
            return 0;
        }
        
        panduan = new boolean[grid.length][grid[0].length];
        int row = grid.length;
        int line = grid[0].length;
        int result = 0;
        
        for(int i = 0; i < row; i++){
            for(int j = 0; j < line; j++){
                if(grid[i][j] == '1'){
                    join(i, j, grid);
                    result++;
                }
            }
        }
        return result;
    }
    public void join(int i, int j, char[][] grid){
        if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] != '1'){
            return;
        }
        grid[i][j] = '0';//标记它已经被选过了
        join(i - 1, j, grid);
        join(i + 1, j, grid);
        join(i, j - 1, grid);
        join(i, j + 1, grid);
    }
}
