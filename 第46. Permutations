Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
这道题和Combination Sum那道题类似，都是深度优先遍历。使用for循环使得其能够遍历所有情况，如果content中已经包含了nums[i]，则说明这是
之前已经遍历过的，continue。content.remove是为了回溯回去。
之前conbination sum那道题：
Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 
[
  [7],
  [2, 2, 3]
]

代码：
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        backtrack(result, new ArrayList<Integer>(), candidates, target, 0);
        return result;
    }
    
    public void backtrack(List<List<Integer>> result, List<Integer> content, int[] candidates,int target, int start){
        if(target > 0){
            for(int i = start; i < candidates.length; i++){
                content.add(candidates[i]);
                backtrack(result, content, candidates, target - candidates[i], i);
                content.remove(content.size() - 1);
            }
            
        }else if(target == 0){
            result.add(new ArrayList<Integer>(content));
        }
    }
}

这道题代码，都是为了遍历所有满足需求的情况：
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(nums.length == 0){
            return result;
        }
        backtrack(result, new ArrayList<Integer>(), nums);
        return result;
    }
    public void backtrack(List<List<Integer>> result, List<Integer> content, int[] nums){
        if(content.size() == nums.length){
            result.add(new ArrayList<Integer>(content));
            return;
        }
        for(int i = 0; i < nums.length; i++){
            if(content.contains(nums[i])){
                continue;
            }
            content.add(nums[i]);
            backtrack(result, content, nums);
            content.remove(content.size() - 1);
        }
    }
}

递归：
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) { 
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        boolean[] used = new boolean[nums.length];
        if(nums.length == 0){
            return result;
        }
        backtrack(result, new ArrayList<Integer>(), nums, used);
        return result;
    }
    public void backtrack(List<List<Integer>> result, List<Integer> content, int[] nums, boolean[] used){
        if(content.size() == nums.length){
            //if(!result.contains(content)),没有用，这里这个contains不是判断是否已经存在content里面的元素，而是判断是否存在content这个元素
            //上面这一句没有意义。
            for(int j = 0; j < content.size(); j++){
                System.out.print(content.get(j));
                
            }
            System.out.println(" ");
            result.add(new ArrayList<Integer>(content));
            return;
        }
        for(int i = 0; i < nums.length; i++){
            if(used[i]){//这个已经用过了，content中已经存在了
                continue;
            }
            if(i > 0 && nums[i] == nums[i-1] && !used[nums[i-1]]){//排序后如果相邻的两个节点数值相同，且content没有包含前面那个节点
                continue;
            }
            used[i] = true;
            content.add(nums[i]);
            backtrack(result, content, nums, used);
            used[i] = false;
            content.remove(content.size() - 1);
        }
    }
}
全排列：
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        ArrayList<List<Integer>> result = new ArrayList<List<Integer>>();
        if(nums.length <= 0){
            return result;
        }
        
        Arrays.sort(nums);
        LinkedList<Integer> content = new LinkedList<Integer>();
        for(int i = 0; i < nums.length; i++){
            content.add(nums[i]);
        }
        result.add(content);
        while(true){
            int left = nums.length - 1;
            //因为是left - 1,所以是left > 0.从右往左找到第一个降序的点，如abc，此时left为c，降序点为b
            //abc为例子,c为left, b为left-1
            while(left > 0 && nums[left - 1] >= nums[left]){//找到交界点
                left--;
            }
            if(left == 0){
                break;//从右到左为降序
            }
            
            int right = left;
            //找到最后一个比降序点(坐标为left - 1)大的值,对应坐标为right,以abc为例，c为right
            //abc为例right为c，left-1为b
            while(right < nums.length && nums[right] > nums[left - 1]){
                right++;
            }
            //abc为例子，此时right-1为c,left-1为b
            swap(nums, left - 1, right - 1);
            //abc为例子，left为最后一位
            reverse(nums, left);
            content = new LinkedList<Integer>();
            for(int i = 0; i < nums.length; i++){
                content.add(nums[i]);
            }
            result.add(content);
        }
        return result;
        
    }
    public void swap(int[] nums, int i, int j){
        int number = nums[i];
        nums[i] = nums[j];
        nums[j] = number;
    }
    public void reverse(int[] nums, int start){
        int end = nums.length - 1;
        while(start <= end){
            swap(nums, start, end);
            start++;
            end--;
        }
    }
}
