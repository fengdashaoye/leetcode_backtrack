There are N students in a class. Some of them are friends, while some are not. Their friendship is transitive in nature. For example, if A is a direct friend of B, and B is a direct friend of C, then A is an indirect friend of C. And we defined a friend circle is a group of students who are direct or indirect friends.

Given a N*N matrix M representing the friend relationship between students in the class. If M[i][j] = 1, then the ith and jth 
students are direct friends with each other, otherwise not. And you have to output the total number of friend circles among all the students.

Example 1:
Input: 
[[1,1,0],
 [1,1,0],
 [0,0,1]]
Output: 2
Explanation:The 0th and 1st students are direct friends, so they are in a friend circle. 
The 2nd student himself is in a friend circle. So return 2.
Example 2:
Input: 
[[1,1,0],
 [1,1,1],
 [0,1,1]]
Output: 1
Explanation:The 0th and 1st students are direct friends, the 1st and 2nd students are direct friends, 
so the 0th and 2nd students are indirect friends. All of them are in the same friend circle, so return 1.
Note:
N is in range [1,200].
M[i][i] = 1 for all students.
If M[i][j] = 1, then M[j][i] = 1.

思路：这是一道深度优先遍历的题目，定义一个全局的list，里面存储这遍历过的学生标号。
主循环中依次遍历每个学生，如果list中没有包括这个学生编号，则以这个学生编号为起点进行深度优先遍历，将其直接朋友与间接朋友加入
全局list中。深度优先遍历也为在递归中加入一个循环，如果M[i][j]=1,即存在直接朋友关系，则将该朋友编号加入list中，然后以朋友编号为起点
进行深度优先遍历。。

代码：
class Solution {
    ArrayList<Integer> list;
    public int findCircleNum(int[][] M) {
        if(M == null || M.length == 0){
            return 0;
        }
        list = new ArrayList<Integer>();
        int count = 0;
        for(int i = 0; i < M.length; i++){
            if(!list.contains(i)){
                list.add(i);
                dps(i, M);
                count++;
            }
        }
        return count;
    }
    public void dps(int start, int[][] M){
        
        for(int i = 0; i < M.length; i++){
            if(M[start][i] == 1){
                if(!list.contains(i)){
                    list.add(i);
                    dps(i, M);
                }
            }
        }
    }
}
